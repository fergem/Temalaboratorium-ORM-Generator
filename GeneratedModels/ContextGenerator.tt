<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Data.OleDb" #>
<#@ import namespace="System.Data" #>
<#@ output extension=".cs" #>
<#
//CHANGE HERE FOR YOUR DATABASE AND DATABASE CONNECTION
var name = "TestDataBase";
var connectionString = $"Provider=sqloledb;Data Source=VIKIGEPE\\SQLEXPRESS;Initial Catalog={name};Integrated Security=SSPI;";
#>

<#
var connectionStringOnConfiguring = connectionString.Remove(0,18);
connectionStringOnConfiguring = connectionStringOnConfiguring.Insert(20,"\\");
using(var conn = new OleDbConnection(connectionString))
{
conn.Open();
#>
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

namespace EForm.GeneratedModels
{
    public partial class <#=name#>Context : DbContext
    {
        public <#=name#>Context()
        {
        }

        public <#=name#>Context(DbContextOptions<<#=name#>Context> options)
            : base(options)
        {
        }

        <#
        string[] restrictionsT = new string[4];
        restrictionsT[3] = "Table";
        DataTable tables = conn.GetSchema("Tables", restrictionsT);
        foreach (DataRow tableRow in tables.Rows) 
        {#>
public virtual DbSet<<#=(string)tableRow[2]#>> <#=(string)tableRow[2]#>s { get; set; } = null!;
        <#
        }
        #>

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
//#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("<#= connectionStringOnConfiguring#>");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
                 <#
            foreach (DataRow tableRow in tables.Rows) 
            {#>

            modelBuilder.Entity<<#=(string)tableRow[2]#>>(entity =>
            {
                entity.ToTable("<#=(string)tableRow[2]#>");

                <#
                string[] restrictionsAtt = new string[4];
                restrictionsAtt[1] = "dbo";
                DataTable attributeCols = conn.GetSchema("Columns", restrictionsAtt);
                foreach (DataRow attributeRow in attributeCols.Rows)
                {
                    if(tableRow[2].ToString() == attributeRow[2].ToString())
                    {
                        string hasMaxLength = "";
                        if(attributeRow[13].ToString() != "")
                            hasMaxLength = $".HasMaxLength({attributeRow[13].ToString()})";
                        string isUnicode = "";
                        if(attributeRow[11].ToString() == "129")
                            isUnicode = ".IsUnicode(false)";
                        string isRequired = "";
                        if(attributeRow[10].ToString() == "False")
                            isRequired = ".IsRequired()";
                        #>

                entity.Property(e => e.<#=attributeRow[3]#>)<#=hasMaxLength#><#=isUnicode#><#=isRequired#>;
                        <#

                    }
                }
                string[] restrictionsFK = { null };
                DataTable fk = conn.GetOleDbSchemaTable(OleDbSchemaGuid.Foreign_Keys, restrictionsFK);
                foreach (DataRow fkRow in fk.Rows)
                {
                if(tableRow[2].ToString() == fkRow[8].ToString())
                    {
                    if(fkRow[2].ToString() != fkRow[8].ToString())
                    {
                    #>

                entity.HasOne(d => d.<#=  fkRow[2].ToString() #>)
                    .WithMany(p => p.<#=  fkRow[8].ToString() #>s)
                    .HasForeignKey(d => d. <#=  fkRow[9].ToString() #>)
                    .HasConstraintName("<#=  fkRow[16].ToString() #>");
                    <#
                    }
                    }
                 }
                #>
            
            });
        <#
        }
        #>

        }
    }
}
<#
}
#>